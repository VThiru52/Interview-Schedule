{"ast":null,"code":"export const generateTimeSlots = (duration, bookedSlots = []) => {\n  const startTime = 6;\n  const endTime = 21;\n  const timeSlots = [];\n  let currentMinute = 0; // Initialize currentMinute to track time accurately\n\n  for (let hour = startTime; hour < endTime; hour++) {\n    console.log(\"----- START\");\n    console.log(startTime);\n    console.log(endTime);\n    for (let minute = currentMinute; minute < 60; minute += duration) {\n      console.log(currentMinute);\n      console.log(duration);\n      const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      console.log(\"time1\", time);\n      let nextHour = hour;\n      let nextMinute = minute + duration;\n      console.log(nextHour);\n      console.log(nextMinute);\n      if (nextMinute >= 60) {\n        console.log(\"nexMinute\", nextMinute);\n        nextHour += 1; // Increment hour directly if nextMinute exceeds 60\n        nextMinute = nextMinute % 60; // Correctly calculate nextMinute\n        console.log(\"nexMinute2\", nextMinute);\n      }\n      const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\n      console.log(\"label\", label);\n      console.log(\"currentMinute currentMinute \", currentMinute);\n      timeSlots.push({\n        label,\n        value: label\n      });\n      currentMinute = nextMinute; // Update currentMinute for subsequent iterations\n      console.log(\"----- END\");\n    }\n    currentMinute = 0; // Reset currentMinute for the next hour\n  }\n  console.log(\"----- END\");\n  return timeSlots;\n};","map":{"version":3,"names":["generateTimeSlots","duration","bookedSlots","startTime","endTime","timeSlots","currentMinute","hour","console","log","minute","time","String","padStart","nextHour","nextMinute","label","push","value"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["export const generateTimeSlots = (duration, bookedSlots= []) => {\r\n    const startTime = 6;\r\n    const endTime = 21;\r\n    const timeSlots = [];\r\n  \r\n    let currentMinute = 0; // Initialize currentMinute to track time accurately\r\n  \r\n    for (let hour = startTime; hour < endTime; hour++) {\r\n        \r\n        console.log(\"----- START\");\r\n        console.log(startTime);\r\n        console.log(endTime);\r\n        \r\n\r\n\r\n      for (let minute = currentMinute; minute < 60; minute += duration) {\r\n\r\n        console.log(currentMinute);\r\n        console.log(duration);\r\n\r\n\r\n        const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n\r\n        console.log(\"time1\",time);\r\n       \r\n\r\n        let nextHour = hour;\r\n        let nextMinute = minute + duration;\r\n\r\n        console.log(nextHour);\r\n        console.log(nextMinute);\r\n  \r\n\r\n        if (nextMinute >= 60) {\r\n            console.log(\"nexMinute\", nextMinute);\r\n          nextHour += 1; // Increment hour directly if nextMinute exceeds 60\r\n          nextMinute = nextMinute % 60; // Correctly calculate nextMinute\r\n          console.log(\"nexMinute2\", nextMinute);\r\n        }\r\n  \r\n        const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\r\n\r\n        console.log(\"label\",label);\r\n        console.log(\"currentMinute currentMinute \",currentMinute);\r\n\r\n        timeSlots.push({ label, value: label });\r\n        \r\n  \r\n        currentMinute = nextMinute; // Update currentMinute for subsequent iterations\r\n        console.log(\"----- END\");\r\n      }\r\n  \r\n      currentMinute = 0; // Reset currentMinute for the next hour\r\n    }\r\n  \r\n    console.log(\"----- END\");\r\n    return timeSlots;\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAE,EAAE,KAAK;EAC5D,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,SAAS,GAAG,EAAE;EAEpB,IAAIC,aAAa,GAAG,CAAC,CAAC,CAAC;;EAEvB,KAAK,IAAIC,IAAI,GAAGJ,SAAS,EAAEI,IAAI,GAAGH,OAAO,EAAEG,IAAI,EAAE,EAAE;IAE/CC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;IAC1BD,OAAO,CAACC,GAAG,CAACN,SAAS,CAAC;IACtBK,OAAO,CAACC,GAAG,CAACL,OAAO,CAAC;IAItB,KAAK,IAAIM,MAAM,GAAGJ,aAAa,EAAEI,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIT,QAAQ,EAAE;MAEhEO,OAAO,CAACC,GAAG,CAACH,aAAa,CAAC;MAC1BE,OAAO,CAACC,GAAG,CAACR,QAAQ,CAAC;MAGrB,MAAMU,IAAI,GAAI,GAAEC,MAAM,CAACL,IAAI,CAAC,CAACM,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAElFL,OAAO,CAACC,GAAG,CAAC,OAAO,EAACE,IAAI,CAAC;MAGzB,IAAIG,QAAQ,GAAGP,IAAI;MACnB,IAAIQ,UAAU,GAAGL,MAAM,GAAGT,QAAQ;MAElCO,OAAO,CAACC,GAAG,CAACK,QAAQ,CAAC;MACrBN,OAAO,CAACC,GAAG,CAACM,UAAU,CAAC;MAGvB,IAAIA,UAAU,IAAI,EAAE,EAAE;QAClBP,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEM,UAAU,CAAC;QACtCD,QAAQ,IAAI,CAAC,CAAC,CAAC;QACfC,UAAU,GAAGA,UAAU,GAAG,EAAE,CAAC,CAAC;QAC9BP,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEM,UAAU,CAAC;MACvC;MAEA,MAAMC,KAAK,GAAI,GAAEL,IAAK,MAAKC,MAAM,CAACE,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACG,UAAU,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAErGL,OAAO,CAACC,GAAG,CAAC,OAAO,EAACO,KAAK,CAAC;MAC1BR,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAACH,aAAa,CAAC;MAEzDD,SAAS,CAACY,IAAI,CAAC;QAAED,KAAK;QAAEE,KAAK,EAAEF;MAAM,CAAC,CAAC;MAGvCV,aAAa,GAAGS,UAAU,CAAC,CAAC;MAC5BP,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;IAC1B;IAEAH,aAAa,GAAG,CAAC,CAAC,CAAC;EACrB;EAEAE,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;EACxB,OAAOJ,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}