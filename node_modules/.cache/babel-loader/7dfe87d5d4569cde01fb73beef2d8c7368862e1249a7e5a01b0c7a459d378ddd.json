{"ast":null,"code":"export const generateTimeSlots = (duration, bookedSlots = []) => {\n  const startTime = 6;\n  const endTime = 21;\n  const timeSlots = [];\n  let currentMinute = 0; // Initialize currentMinute to track time accurately\n\n  for (let hour = startTime; hour < endTime; hour++) {\n    for (let minute = currentMinute; minute < 60; minute += duration) {\n      const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      let nextHour = hour;\n      let nextMinute = minute + duration;\n      if (nextMinute >= 60) {\n        nextHour += 1; // Increment hour directly if nextMinute exceeds 60\n        nextMinute = nextMinute % 60; // Correctly calculate nextMinute\n      }\n      const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\n      const startTime = `${time}`;\n      const endTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(3, '0')}`;\n\n      // Check if the current time slot overlaps with any of the booked slots\n      const isOverlap = bookedSlots.some(bookedSlot => {\n        const bookedStartTime = new Date(`2022-01-01T${bookedSlot.startTime}:00Z`);\n        const bookedEndTime = new Date(`2022-01-01T${bookedSlot.endTime}:00Z`);\n        const timeSlotStartTime = new Date(`2022-01-01T${startTime}:00Z`);\n        const timeSlotEndTime = new Date(`2022-01-01T${endTime}:00Z`);\n\n        // Check if the time slot starts during the booked slot or ends during the booked slot\n        return timeSlotStartTime >= bookedStartTime && timeSlotStartTime <= bookedEndTime || timeSlotEndTime >= bookedStartTime && timeSlotEndTime <= bookedEndTime;\n      });\n\n      // If there is no overlap, add the time slot to the list\n      if (!isOverlap) {\n        timeSlots.push({\n          label,\n          value: label\n        });\n      }\n      currentMinute = nextMinute; // Update currentMinute for subsequent iterations\n    }\n    currentMinute = 0; // Reset currentMinute for the next hour\n  }\n  return timeSlots;\n};","map":{"version":3,"names":["generateTimeSlots","duration","bookedSlots","startTime","endTime","timeSlots","currentMinute","hour","minute","time","String","padStart","nextHour","nextMinute","label","isOverlap","some","bookedSlot","bookedStartTime","Date","bookedEndTime","timeSlotStartTime","timeSlotEndTime","push","value"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["export const generateTimeSlots = (duration, bookedSlots = []) => {\r\n    const startTime = 6;\r\n    const endTime = 21;\r\n    const timeSlots = [];\r\n    let currentMinute = 0; // Initialize currentMinute to track time accurately\r\n  \r\n    for (let hour = startTime; hour < endTime; hour++) {\r\n      for (let minute = currentMinute; minute < 60; minute += duration) {\r\n        const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n        let nextHour = hour;\r\n        let nextMinute = minute + duration;\r\n  \r\n        if (nextMinute >= 60) {\r\n          nextHour += 1; // Increment hour directly if nextMinute exceeds 60\r\n          nextMinute = nextMinute % 60; // Correctly calculate nextMinute\r\n        }\r\n  \r\n        const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\r\n        const startTime = `${time}`;\r\n        const endTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(3, '0')}`;\r\n  \r\n        // Check if the current time slot overlaps with any of the booked slots\r\n        const isOverlap = bookedSlots.some(bookedSlot => {\r\n          const bookedStartTime = new Date(`2022-01-01T${bookedSlot.startTime}:00Z`);\r\n          const bookedEndTime = new Date(`2022-01-01T${bookedSlot.endTime}:00Z`);\r\n          const timeSlotStartTime = new Date(`2022-01-01T${startTime}:00Z`);\r\n          const timeSlotEndTime = new Date(`2022-01-01T${endTime}:00Z`);\r\n  \r\n          // Check if the time slot starts during the booked slot or ends during the booked slot\r\n          return timeSlotStartTime >= bookedStartTime && timeSlotStartTime <= bookedEndTime ||\r\n                 timeSlotEndTime >= bookedStartTime && timeSlotEndTime <= bookedEndTime;\r\n        });\r\n  \r\n        // If there is no overlap, add the time slot to the list\r\n        if (!isOverlap) {\r\n          timeSlots.push({ label, value: label });\r\n        }\r\n  \r\n        currentMinute = nextMinute; // Update currentMinute for subsequent iterations\r\n      }\r\n  \r\n      currentMinute = 0; // Reset currentMinute for the next hour\r\n    }\r\n  \r\n    return timeSlots;\r\n  };"],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAG,EAAE,KAAK;EAC7D,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,SAAS,GAAG,EAAE;EACpB,IAAIC,aAAa,GAAG,CAAC,CAAC,CAAC;;EAEvB,KAAK,IAAIC,IAAI,GAAGJ,SAAS,EAAEI,IAAI,GAAGH,OAAO,EAAEG,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIC,MAAM,GAAGF,aAAa,EAAEE,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIP,QAAQ,EAAE;MAChE,MAAMQ,IAAI,GAAI,GAAEC,MAAM,CAACH,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAClF,IAAIC,QAAQ,GAAGL,IAAI;MACnB,IAAIM,UAAU,GAAGL,MAAM,GAAGP,QAAQ;MAElC,IAAIY,UAAU,IAAI,EAAE,EAAE;QACpBD,QAAQ,IAAI,CAAC,CAAC,CAAC;QACfC,UAAU,GAAGA,UAAU,GAAG,EAAE,CAAC,CAAC;MAChC;MAEA,MAAMC,KAAK,GAAI,GAAEL,IAAK,MAAKC,MAAM,CAACE,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACG,UAAU,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MACrG,MAAMR,SAAS,GAAI,GAAEM,IAAK,EAAC;MAC3B,MAAML,OAAO,GAAI,GAAEM,MAAM,CAACE,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACG,UAAU,CAAC,CAACF,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;;MAE7F;MACA,MAAMI,SAAS,GAAGb,WAAW,CAACc,IAAI,CAACC,UAAU,IAAI;QAC/C,MAAMC,eAAe,GAAG,IAAIC,IAAI,CAAE,cAAaF,UAAU,CAACd,SAAU,MAAK,CAAC;QAC1E,MAAMiB,aAAa,GAAG,IAAID,IAAI,CAAE,cAAaF,UAAU,CAACb,OAAQ,MAAK,CAAC;QACtE,MAAMiB,iBAAiB,GAAG,IAAIF,IAAI,CAAE,cAAahB,SAAU,MAAK,CAAC;QACjE,MAAMmB,eAAe,GAAG,IAAIH,IAAI,CAAE,cAAaf,OAAQ,MAAK,CAAC;;QAE7D;QACA,OAAOiB,iBAAiB,IAAIH,eAAe,IAAIG,iBAAiB,IAAID,aAAa,IAC1EE,eAAe,IAAIJ,eAAe,IAAII,eAAe,IAAIF,aAAa;MAC/E,CAAC,CAAC;;MAEF;MACA,IAAI,CAACL,SAAS,EAAE;QACdV,SAAS,CAACkB,IAAI,CAAC;UAAET,KAAK;UAAEU,KAAK,EAAEV;QAAM,CAAC,CAAC;MACzC;MAEAR,aAAa,GAAGO,UAAU,CAAC,CAAC;IAC9B;IAEAP,aAAa,GAAG,CAAC,CAAC,CAAC;EACrB;EAEA,OAAOD,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}