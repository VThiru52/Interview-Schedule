{"ast":null,"code":"function generateTimeSlots(duration, bookedSlots = []) {\n  const startTime = 6;\n  const endTime = 23; // Using 24-hour format for simplicity\n\n  let currentMinute = 0;\n  const timeSlots = [];\n  for (let hour = startTime; hour < endTime; hour++) {\n    for (let minute = currentMinute; minute < 60; minute += duration) {\n      const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      const nextHour = hour + Math.floor((minute + duration) / 60);\n      const nextMinute = (minute + duration) % 60;\n      const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\n      const isSlotBooked = bookedSlots.some(slot => slot.startTime <= time && slot.endTime > time || slot.startTime < label && slot.endTime >= label);\n      if (!isSlotBooked) {\n        timeSlots.push({\n          label,\n          value: time\n        });\n      }\n      currentMinute = nextMinute;\n    }\n    currentMinute = 0;\n  }\n  return timeSlots;\n}","map":{"version":3,"names":["generateTimeSlots","duration","bookedSlots","startTime","endTime","currentMinute","timeSlots","hour","minute","time","String","padStart","nextHour","Math","floor","nextMinute","label","isSlotBooked","some","slot","push","value"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["function generateTimeSlots(duration, bookedSlots= []) {\r\n    const startTime = 6;\r\n    const endTime = 23; // Using 24-hour format for simplicity\r\n  \r\n    let currentMinute = 0;\r\n    const timeSlots = [];\r\n  \r\n    for (let hour = startTime; hour < endTime; hour++) {\r\n      for (let minute = currentMinute; minute < 60; minute += duration) {\r\n        const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n        const nextHour = hour + Math.floor((minute + duration) / 60);\r\n        const nextMinute = (minute + duration) % 60;\r\n        const label = `${time} - ${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\r\n  \r\n        const isSlotBooked = bookedSlots.some(\r\n          (slot) =>\r\n            (slot.startTime <= time && slot.endTime > time) ||\r\n            (slot.startTime < label && slot.endTime >= label)\r\n        );\r\n  \r\n        if (!isSlotBooked) {\r\n          timeSlots.push({ label, value: time });\r\n        }\r\n  \r\n        currentMinute = nextMinute;\r\n      }\r\n  \r\n      currentMinute = 0;\r\n    }\r\n  \r\n    return timeSlots;\r\n  }"],"mappings":"AAAA,SAASA,iBAAiBA,CAACC,QAAQ,EAAEC,WAAW,GAAE,EAAE,EAAE;EAClD,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE,CAAC,CAAC;;EAEpB,IAAIC,aAAa,GAAG,CAAC;EACrB,MAAMC,SAAS,GAAG,EAAE;EAEpB,KAAK,IAAIC,IAAI,GAAGJ,SAAS,EAAEI,IAAI,GAAGH,OAAO,EAAEG,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIC,MAAM,GAAGH,aAAa,EAAEG,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIP,QAAQ,EAAE;MAChE,MAAMQ,IAAI,GAAI,GAAEC,MAAM,CAACH,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAClF,MAAMC,QAAQ,GAAGL,IAAI,GAAGM,IAAI,CAACC,KAAK,CAAC,CAACN,MAAM,GAAGP,QAAQ,IAAI,EAAE,CAAC;MAC5D,MAAMc,UAAU,GAAG,CAACP,MAAM,GAAGP,QAAQ,IAAI,EAAE;MAC3C,MAAMe,KAAK,GAAI,GAAEP,IAAK,MAAKC,MAAM,CAACE,QAAQ,CAAC,CAACD,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACK,UAAU,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAErG,MAAMM,YAAY,GAAGf,WAAW,CAACgB,IAAI,CAClCC,IAAI,IACFA,IAAI,CAAChB,SAAS,IAAIM,IAAI,IAAIU,IAAI,CAACf,OAAO,GAAGK,IAAI,IAC7CU,IAAI,CAAChB,SAAS,GAAGa,KAAK,IAAIG,IAAI,CAACf,OAAO,IAAIY,KAC/C,CAAC;MAED,IAAI,CAACC,YAAY,EAAE;QACjBX,SAAS,CAACc,IAAI,CAAC;UAAEJ,KAAK;UAAEK,KAAK,EAAEZ;QAAK,CAAC,CAAC;MACxC;MAEAJ,aAAa,GAAGU,UAAU;IAC5B;IAEAV,aAAa,GAAG,CAAC;EACnB;EAEA,OAAOC,SAAS;AAClB"},"metadata":{},"sourceType":"module","externalDependencies":[]}