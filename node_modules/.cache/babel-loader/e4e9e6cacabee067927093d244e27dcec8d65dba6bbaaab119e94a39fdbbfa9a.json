{"ast":null,"code":"export const generateTimeSlots = (duration, bookedSlots = []) => {\n  const startTime = 6;\n  const endTime = 21;\n  const timeSlots = [];\n  let currentMinute = 0;\n  for (let hour = startTime; hour < endTime; hour++) {\n    for (let minute = currentMinute; minute < 60; minute += duration) {\n      const currentTime = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n      console.log(currentTime);\n      // Check if the current time slot is already booked\n      if (bookedSlots.includes(currentTime)) {\n        currentMinute = minute + duration; // Skip to the next available time slot\n        continue;\n      }\n      const nextHour = hour + Math.floor((minute + duration) / 60);\n      const nextMinute = (minute + duration) % 60;\n      const nextTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\n      const label = `${currentTime} - ${nextTime}`;\n      timeSlots.push({\n        label,\n        value: currentTime\n      });\n      currentMinute = nextMinute;\n    }\n    currentMinute = 0;\n  }\n  return timeSlots;\n};","map":{"version":3,"names":["generateTimeSlots","duration","bookedSlots","startTime","endTime","timeSlots","currentMinute","hour","minute","currentTime","String","padStart","console","log","includes","nextHour","Math","floor","nextMinute","nextTime","label","push","value"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["export const generateTimeSlots = (duration, bookedSlots = []) => {\r\n    const startTime = 6;\r\n    const endTime = 21;\r\n    const timeSlots = [];\r\n  \r\n    let currentMinute = 0;\r\n  \r\n    for (let hour = startTime; hour < endTime; hour++) {\r\n      for (let minute = currentMinute; minute < 60; minute += duration) {\r\n        const currentTime = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n  \r\n        console.log(currentTime);\r\n        // Check if the current time slot is already booked\r\n        if (bookedSlots.includes(currentTime)) {\r\n          currentMinute = minute + duration; // Skip to the next available time slot\r\n          continue;\r\n        }\r\n  \r\n        const nextHour = hour + Math.floor((minute + duration) / 60);\r\n        const nextMinute = (minute + duration) % 60;\r\n        const nextTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\r\n  \r\n        const label = `${currentTime} - ${nextTime}`;\r\n        timeSlots.push({ label, value: currentTime });\r\n  \r\n        currentMinute = nextMinute;\r\n      }\r\n  \r\n      currentMinute = 0;\r\n    }\r\n  \r\n    return timeSlots;\r\n  };\r\n  "],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAG,EAAE,KAAK;EAC7D,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,SAAS,GAAG,EAAE;EAEpB,IAAIC,aAAa,GAAG,CAAC;EAErB,KAAK,IAAIC,IAAI,GAAGJ,SAAS,EAAEI,IAAI,GAAGH,OAAO,EAAEG,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIC,MAAM,GAAGF,aAAa,EAAEE,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIP,QAAQ,EAAE;MAChE,MAAMQ,WAAW,GAAI,GAAEC,MAAM,CAACH,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAEzFC,OAAO,CAACC,GAAG,CAACJ,WAAW,CAAC;MACxB;MACA,IAAIP,WAAW,CAACY,QAAQ,CAACL,WAAW,CAAC,EAAE;QACrCH,aAAa,GAAGE,MAAM,GAAGP,QAAQ,CAAC,CAAC;QACnC;MACF;MAEA,MAAMc,QAAQ,GAAGR,IAAI,GAAGS,IAAI,CAACC,KAAK,CAAC,CAACT,MAAM,GAAGP,QAAQ,IAAI,EAAE,CAAC;MAC5D,MAAMiB,UAAU,GAAG,CAACV,MAAM,GAAGP,QAAQ,IAAI,EAAE;MAC3C,MAAMkB,QAAQ,GAAI,GAAET,MAAM,CAACK,QAAQ,CAAC,CAACJ,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACQ,UAAU,CAAC,CAACP,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAE9F,MAAMS,KAAK,GAAI,GAAEX,WAAY,MAAKU,QAAS,EAAC;MAC5Cd,SAAS,CAACgB,IAAI,CAAC;QAAED,KAAK;QAAEE,KAAK,EAAEb;MAAY,CAAC,CAAC;MAE7CH,aAAa,GAAGY,UAAU;IAC5B;IAEAZ,aAAa,GAAG,CAAC;EACnB;EAEA,OAAOD,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}