{"ast":null,"code":"export const generateTimeSlots = (duration, bookedSlots = []) => {\n  const startTime = 6;\n  const endTime = 21;\n  const timeSlots = [];\n\n  // Get the latest ending time from booked slots, or start at startTime\n  let currentMinute = bookedSlots.length > 0 ? bookedSlots.pop().endTime * 1 // Get last booked slot's end time\n  : 0;\n  for (let hour = startTime; hour < endTime; hour++) {\n    for (let minute = currentMinute; minute < 60; minute += duration) {\n      const currentTime = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\n\n      // Check if the current time slot overlaps with existing booked slots\n      if (bookedSlots.some(slot => {\n        const slotStart = slot.startTime * 1;\n        const slotEnd = slot.endTime * 1;\n        return slotStart <= minute && minute < slotEnd;\n      })) {\n        currentMinute = minute + duration; // Skip to the next available time slot\n        continue;\n      }\n      const nextHour = hour + Math.floor((minute + duration) / 60);\n      const nextMinute = (minute + duration) % 60;\n      const nextTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\n      const label = `${currentTime} - ${nextTime}`;\n      const startTime = currentTime;\n      const endTime = nextTime;\n      timeSlots.push({\n        label,\n        value: label,\n        startTime,\n        endTime\n      }); // Include startTime and endTime\n\n      currentMinute = nextMinute;\n    }\n    currentMinute = 0;\n  }\n  return timeSlots;\n};","map":{"version":3,"names":["generateTimeSlots","duration","bookedSlots","startTime","endTime","timeSlots","currentMinute","length","pop","hour","minute","currentTime","String","padStart","some","slot","slotStart","slotEnd","nextHour","Math","floor","nextMinute","nextTime","label","push","value"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["export const generateTimeSlots = (duration, bookedSlots = []) => {\r\n    const startTime = 6;\r\n    const endTime = 21;\r\n    const timeSlots = [];\r\n  \r\n    // Get the latest ending time from booked slots, or start at startTime\r\n    let currentMinute = bookedSlots.length > 0\r\n      ? bookedSlots.pop().endTime * 1 // Get last booked slot's end time\r\n      : 0;\r\n  \r\n    for (let hour = startTime; hour < endTime; hour++) {\r\n      for (let minute = currentMinute; minute < 60; minute += duration) {\r\n        const currentTime = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;\r\n  \r\n        // Check if the current time slot overlaps with existing booked slots\r\n        if (bookedSlots.some(slot => {\r\n          const slotStart = slot.startTime * 1;\r\n          const slotEnd = slot.endTime * 1;\r\n          return slotStart <= minute && minute < slotEnd;\r\n        })) {\r\n          currentMinute = minute + duration; // Skip to the next available time slot\r\n          continue;\r\n        }\r\n  \r\n        const nextHour = hour + Math.floor((minute + duration) / 60);\r\n        const nextMinute = (minute + duration) % 60;\r\n        const nextTime = `${String(nextHour).padStart(2, '0')}:${String(nextMinute).padStart(2, '0')}`;\r\n  \r\n        const label = `${currentTime} - ${nextTime}`;\r\n        const startTime = currentTime;\r\n        const endTime = nextTime;\r\n  \r\n        timeSlots.push({ label, value: label, startTime, endTime }); // Include startTime and endTime\r\n  \r\n        currentMinute = nextMinute;\r\n      }\r\n  \r\n      currentMinute = 0;\r\n    }\r\n  \r\n    return timeSlots;\r\n  };\r\n  "],"mappings":"AAAA,OAAO,MAAMA,iBAAiB,GAAGA,CAACC,QAAQ,EAAEC,WAAW,GAAG,EAAE,KAAK;EAC7D,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,SAAS,GAAG,EAAE;;EAEpB;EACA,IAAIC,aAAa,GAAGJ,WAAW,CAACK,MAAM,GAAG,CAAC,GACtCL,WAAW,CAACM,GAAG,CAAC,CAAC,CAACJ,OAAO,GAAG,CAAC,CAAC;EAAA,EAC9B,CAAC;EAEL,KAAK,IAAIK,IAAI,GAAGN,SAAS,EAAEM,IAAI,GAAGL,OAAO,EAAEK,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIC,MAAM,GAAGJ,aAAa,EAAEI,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIT,QAAQ,EAAE;MAChE,MAAMU,WAAW,GAAI,GAAEC,MAAM,CAACH,IAAI,CAAC,CAACI,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACF,MAAM,CAAC,CAACG,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;;MAEzF;MACA,IAAIX,WAAW,CAACY,IAAI,CAACC,IAAI,IAAI;QAC3B,MAAMC,SAAS,GAAGD,IAAI,CAACZ,SAAS,GAAG,CAAC;QACpC,MAAMc,OAAO,GAAGF,IAAI,CAACX,OAAO,GAAG,CAAC;QAChC,OAAOY,SAAS,IAAIN,MAAM,IAAIA,MAAM,GAAGO,OAAO;MAChD,CAAC,CAAC,EAAE;QACFX,aAAa,GAAGI,MAAM,GAAGT,QAAQ,CAAC,CAAC;QACnC;MACF;MAEA,MAAMiB,QAAQ,GAAGT,IAAI,GAAGU,IAAI,CAACC,KAAK,CAAC,CAACV,MAAM,GAAGT,QAAQ,IAAI,EAAE,CAAC;MAC5D,MAAMoB,UAAU,GAAG,CAACX,MAAM,GAAGT,QAAQ,IAAI,EAAE;MAC3C,MAAMqB,QAAQ,GAAI,GAAEV,MAAM,CAACM,QAAQ,CAAC,CAACL,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,IAAGD,MAAM,CAACS,UAAU,CAAC,CAACR,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAE,EAAC;MAE9F,MAAMU,KAAK,GAAI,GAAEZ,WAAY,MAAKW,QAAS,EAAC;MAC5C,MAAMnB,SAAS,GAAGQ,WAAW;MAC7B,MAAMP,OAAO,GAAGkB,QAAQ;MAExBjB,SAAS,CAACmB,IAAI,CAAC;QAAED,KAAK;QAAEE,KAAK,EAAEF,KAAK;QAAEpB,SAAS;QAAEC;MAAQ,CAAC,CAAC,CAAC,CAAC;;MAE7DE,aAAa,GAAGe,UAAU;IAC5B;IAEAf,aAAa,GAAG,CAAC;EACnB;EAEA,OAAOD,SAAS;AAClB,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}