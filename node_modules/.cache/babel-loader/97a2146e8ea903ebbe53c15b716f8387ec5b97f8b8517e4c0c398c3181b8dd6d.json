{"ast":null,"code":"function generateTimeSlots(date, duration, exclude) {\n  const timeSlots = [];\n  const startHour = 9;\n  const endHour = 17;\n  const hourStep = 30; // duration is in minutes, so 30 minutes = 0.5 hours\n\n  for (let hour = startHour; hour < endHour; hour++) {\n    for (let minute = 0; minute < 60; minute += duration) {\n      const time = new Date(date);\n      time.setHours(hour, minute);\n\n      // check if time should be excluded\n      if (exclude.some(ex => isTimeWithinRange(ex, time))) {\n        continue;\n      }\n      timeSlots.push(new Date(time));\n    }\n  }\n  return timeSlots;\n}\nfunction isTimeWithinRange(range, time) {\n  return time >= range.start && time <= range.end && (range.start.getDate() === time.getDate() || range.end.getDate() === time.getDate());\n}\n\n// example usage\nconst date = new Date();\nconst duration = 30; // minutes\nconst exclude = [{\n  start: new Date(),\n  end: new Date(date.getTime() + 60 * 60 * 1000)\n} // exclude the next hour\n];\nconst timeSlots = generateTimeSlots(date, duration, exclude);\nconsole.log(timeSlots);","map":{"version":3,"names":["generateTimeSlots","date","duration","exclude","timeSlots","startHour","endHour","hourStep","hour","minute","time","Date","setHours","some","ex","isTimeWithinRange","push","range","start","end","getDate","getTime","console","log"],"sources":["D:/Slope Rate Techno/slope-rate-techno-time-slots/src/utils.js"],"sourcesContent":["function generateTimeSlots(date, duration, exclude) {\r\n    const timeSlots = [];\r\n    const startHour = 9;\r\n    const endHour = 17;\r\n    const hourStep = 30; // duration is in minutes, so 30 minutes = 0.5 hours\r\n  \r\n    for (let hour = startHour; hour < endHour; hour++) {\r\n      for (let minute = 0; minute < 60; minute += duration) {\r\n        const time = new Date(date);\r\n        time.setHours(hour, minute);\r\n  \r\n        // check if time should be excluded\r\n        if (exclude.some(ex => isTimeWithinRange(ex, time))) {\r\n          continue;\r\n        }\r\n  \r\n        timeSlots.push(new Date(time));\r\n      }\r\n    }\r\n  \r\n    return timeSlots;\r\n  }\r\n  \r\n  function isTimeWithinRange(range, time) {\r\n    return (\r\n      time >= range.start && time <= range.end &&\r\n      (range.start.getDate() === time.getDate() ||\r\n       range.end.getDate() === time.getDate())\r\n    );\r\n  }\r\n  \r\n  // example usage\r\n  const date = new Date();\r\n  const duration = 30; // minutes\r\n  const exclude = [\r\n    { start: new Date(), end: new Date(date.getTime() + 60 * 60 * 1000) }, // exclude the next hour\r\n  ];\r\n  \r\n  const timeSlots = generateTimeSlots(date, duration, exclude);\r\n  console.log(timeSlots);"],"mappings":"AAAA,SAASA,iBAAiBA,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,EAAE;EAChD,MAAMC,SAAS,GAAG,EAAE;EACpB,MAAMC,SAAS,GAAG,CAAC;EACnB,MAAMC,OAAO,GAAG,EAAE;EAClB,MAAMC,QAAQ,GAAG,EAAE,CAAC,CAAC;;EAErB,KAAK,IAAIC,IAAI,GAAGH,SAAS,EAAEG,IAAI,GAAGF,OAAO,EAAEE,IAAI,EAAE,EAAE;IACjD,KAAK,IAAIC,MAAM,GAAG,CAAC,EAAEA,MAAM,GAAG,EAAE,EAAEA,MAAM,IAAIP,QAAQ,EAAE;MACpD,MAAMQ,IAAI,GAAG,IAAIC,IAAI,CAACV,IAAI,CAAC;MAC3BS,IAAI,CAACE,QAAQ,CAACJ,IAAI,EAAEC,MAAM,CAAC;;MAE3B;MACA,IAAIN,OAAO,CAACU,IAAI,CAACC,EAAE,IAAIC,iBAAiB,CAACD,EAAE,EAAEJ,IAAI,CAAC,CAAC,EAAE;QACnD;MACF;MAEAN,SAAS,CAACY,IAAI,CAAC,IAAIL,IAAI,CAACD,IAAI,CAAC,CAAC;IAChC;EACF;EAEA,OAAON,SAAS;AAClB;AAEA,SAASW,iBAAiBA,CAACE,KAAK,EAAEP,IAAI,EAAE;EACtC,OACEA,IAAI,IAAIO,KAAK,CAACC,KAAK,IAAIR,IAAI,IAAIO,KAAK,CAACE,GAAG,KACvCF,KAAK,CAACC,KAAK,CAACE,OAAO,CAAC,CAAC,KAAKV,IAAI,CAACU,OAAO,CAAC,CAAC,IACxCH,KAAK,CAACE,GAAG,CAACC,OAAO,CAAC,CAAC,KAAKV,IAAI,CAACU,OAAO,CAAC,CAAC,CAAC;AAE5C;;AAEA;AACA,MAAMnB,IAAI,GAAG,IAAIU,IAAI,CAAC,CAAC;AACvB,MAAMT,QAAQ,GAAG,EAAE,CAAC,CAAC;AACrB,MAAMC,OAAO,GAAG,CACd;EAAEe,KAAK,EAAE,IAAIP,IAAI,CAAC,CAAC;EAAEQ,GAAG,EAAE,IAAIR,IAAI,CAACV,IAAI,CAACoB,OAAO,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,IAAI;AAAE,CAAC,CAAE;AAAA,CACxE;AAED,MAAMjB,SAAS,GAAGJ,iBAAiB,CAACC,IAAI,EAAEC,QAAQ,EAAEC,OAAO,CAAC;AAC5DmB,OAAO,CAACC,GAAG,CAACnB,SAAS,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}